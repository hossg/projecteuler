# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms..

import os
import logging
logger=logging.getLogger(os.path.basename(__file__))
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(name)s %(message)s')

def yieldFibonacci():
    a,b = 1,2   # The first two numbers in "this" Fibonacci series (normally, the first two would be 0,1 or 1,1)
    while True:
        yield a
        a,b = b,a+b

def yieldEvenFibonacci():
    for i in yieldFibonacci():
        if i % 2 == 0:
            yield i

def solution():
    total = 0
    for i in yieldEvenFibonacci():

        if i < 4000000:
            #print(i)
            total += i
        else:
            break

    logger.info("solution = {} ".format(total))
    assert(total==4613732)
    return total

if __name__ == "__main__":
    solution()