# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
#
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#
# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#
# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj|
# is minimised; what is the value of D?

import logging

def pentagon(n):
    return n*(3*n-1)/2

def solution():
    pentagons=[]
    for n in range (0,10000): # not obvious why we should limit ourselves here
        p=pentagon(n)
        pentagons.append(p)


    for k in range(len(pentagons)):
        pk=pentagons[k]
        for j in range(k):
            pj=pentagons[j]
            if (pk-pj) in pentagons[:k]:    # we'll search for the difference first, since it's guaranteed to have a
                                            # smaller search space than the sum, so we can discard failures earlier
                if (pk+pj) in pentagons:
                    logging.info('Found matching pentagonal numbers: {},{}'.format(pj,pk))
                    return (pk-pj)          # nor obvious why we should return the first one we find, though this
                                            # turns out to be correct!


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(name)s %(message)s')
    solution = solution()
    assert (solution == 5482660)
    logging.info('Solution = {}'.format(solution))
